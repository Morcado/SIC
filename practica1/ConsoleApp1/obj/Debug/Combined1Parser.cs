//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Morcado\Desktop\SIC\practica1\ConsoleApp1\Combined1.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Combined1Parser : Parser {
	public const int
		PARENI=1, PAREND=2, ADD=3, SUB=4, MUL=5, INT=6, DIV=7, NEWLINE=8, WS=9;
	public const int
		RULE_stat = 0, RULE_exp = 1, RULE_exp2 = 2, RULE_num = 3, RULE_compileUnit = 4;
	public static readonly string[] ruleNames = {
		"stat", "exp", "exp2", "num", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", null, "'/'", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PARENI", "PAREND", "ADD", "SUB", "MUL", "INT", "DIV", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Combined1Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StatContext : ParserRuleContext {
		public int value;
		public ExpContext c;
		public ITerminalNode NEWLINE() { return GetToken(Combined1Parser.NEWLINE, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_stat);
		try {
			State = 15;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PARENI:
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; _localctx.c = exp();
				State = 11; Match(NEWLINE);
				 
						System.Console.Write(_localctx.c.value); 
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public int value;
		public Exp2Context a;
		public Exp2Context b;
		public Exp2Context[] exp2() {
			return GetRuleContexts<Exp2Context>();
		}
		public Exp2Context exp2(int i) {
			return GetRuleContext<Exp2Context>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(Combined1Parser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(Combined1Parser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(Combined1Parser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(Combined1Parser.SUB, i);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17; _localctx.a = exp2();
			_localctx.value =  _localctx.a.value;
			State = 29;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD || _la==SUB) {
				{
				State = 27;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ADD:
					{
					State = 19; Match(ADD);
					State = 20; _localctx.b = exp2();
					 _localctx.value =  _localctx.value + _localctx.b.value; 
					}
					break;
				case SUB:
					{
					State = 23; Match(SUB);
					State = 24; _localctx.b = exp2();
					 _localctx.value =  _localctx.value - _localctx.b.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			System.Console.WriteLine(_localctx.value);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp2Context : ParserRuleContext {
		public int value;
		public NumContext a;
		public NumContext b;
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public ITerminalNode[] MUL() { return GetTokens(Combined1Parser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(Combined1Parser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(Combined1Parser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(Combined1Parser.DIV, i);
		}
		public Exp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterExp2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitExp2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp2Context exp2() {
		Exp2Context _localctx = new Exp2Context(_ctx, State);
		EnterRule(_localctx, 4, RULE_exp2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; _localctx.a = num();
			 _localctx.value =  _localctx.a.value; 
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MUL || _la==DIV) {
				{
				State = 44;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case MUL:
					{
					State = 36; Match(MUL);
					State = 37; _localctx.b = num();
						_localctx.value =  _localctx.value * _localctx.b.value; 
					}
					break;
				case DIV:
					{
					State = 40; Match(DIV);
					State = 41; _localctx.b = num();
						if(_localctx.b.value != 0){
												_localctx.value =  _localctx.value / _localctx.b.value;
											}
											else{
												System.Console.WriteLine("Error: division entre ");
												_localctx.value =  0;
											}
										
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public int value;
		public IToken _INT;
		public ExpContext _exp;
		public ITerminalNode INT() { return GetToken(Combined1Parser.INT, 0); }
		public ITerminalNode PARENI() { return GetToken(Combined1Parser.PARENI, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode PAREND() { return GetToken(Combined1Parser.PAREND, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_num);
		try {
			State = 56;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; _localctx._INT = Match(INT);
				 _localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null)); 
				}
				break;
			case PARENI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(PARENI);
				State = 52; _localctx._exp = exp();
				State = 53; Match(PAREND);
				 _localctx.value =  _localctx._exp.value; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Combined1Parser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\v?\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x5\x2\x12\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3\x1E\n\x3\f\x3\xE\x3!\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4/\n\x4\f\x4\xE\x4\x32\v\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5;\n\x5\x3\x6\x3\x6\x3"+
		"\x6\x2\x2\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x2?\x2\x11\x3\x2\x2\x2\x4"+
		"\x13\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b:\x3\x2\x2\x2\n<\x3\x2\x2\x2\f\r\x5"+
		"\x4\x3\x2\r\xE\a\n\x2\x2\xE\xF\b\x2\x1\x2\xF\x12\x3\x2\x2\x2\x10\x12\a"+
		"\n\x2\x2\x11\f\x3\x2\x2\x2\x11\x10\x3\x2\x2\x2\x12\x3\x3\x2\x2\x2\x13"+
		"\x14\x5\x6\x4\x2\x14\x1F\b\x3\x1\x2\x15\x16\a\x5\x2\x2\x16\x17\x5\x6\x4"+
		"\x2\x17\x18\b\x3\x1\x2\x18\x1E\x3\x2\x2\x2\x19\x1A\a\x6\x2\x2\x1A\x1B"+
		"\x5\x6\x4\x2\x1B\x1C\b\x3\x1\x2\x1C\x1E\x3\x2\x2\x2\x1D\x15\x3\x2\x2\x2"+
		"\x1D\x19\x3\x2\x2\x2\x1E!\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2"+
		"\x2 \"\x3\x2\x2\x2!\x1F\x3\x2\x2\x2\"#\b\x3\x1\x2#\x5\x3\x2\x2\x2$%\x5"+
		"\b\x5\x2%\x30\b\x4\x1\x2&\'\a\a\x2\x2\'(\x5\b\x5\x2()\b\x4\x1\x2)/\x3"+
		"\x2\x2\x2*+\a\t\x2\x2+,\x5\b\x5\x2,-\b\x4\x1\x2-/\x3\x2\x2\x2.&\x3\x2"+
		"\x2\x2.*\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30\x31\x3\x2\x2"+
		"\x2\x31\a\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x33\x34\a\b\x2\x2\x34;\b\x5"+
		"\x1\x2\x35\x36\a\x3\x2\x2\x36\x37\x5\x4\x3\x2\x37\x38\a\x4\x2\x2\x38\x39"+
		"\b\x5\x1\x2\x39;\x3\x2\x2\x2:\x33\x3\x2\x2\x2:\x35\x3\x2\x2\x2;\t\x3\x2"+
		"\x2\x2<=\a\x2\x2\x3=\v\x3\x2\x2\x2\b\x11\x1D\x1F.\x30:";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp1
