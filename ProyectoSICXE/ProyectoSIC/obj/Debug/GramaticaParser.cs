//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Morcado\Desktop\SIC\ProyectoSICXE\ProyectoSIC\Gramatica.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProyectoSIC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GramaticaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INSTR=6, DIRECTIVE=7, START=8, 
		END=9, LABEL=10, NUM=11, NUM_CHAR=12, EMPTY=13, ENDL=14, WS=15;
	public const int
		RULE_prog = 0, RULE_start = 1, RULE_end = 2, RULE_input = 3, RULE_propositions = 4, 
		RULE_proposition = 5, RULE_instruction = 6, RULE_directive = 7, RULE_label = 8, 
		RULE_instr_args = 9, RULE_directive_args = 10, RULE_compileUnit = 11;
	public static readonly string[] ruleNames = {
		"prog", "start", "end", "input", "propositions", "proposition", "instruction", 
		"directive", "label", "instr_args", "directive_args", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "', X'", "',X'", "'X''", "'''", "'C''", null, null, "'START'", "'END'", 
		null, null, null, "' '", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INSTR", "DIRECTIVE", "START", "END", 
		"LABEL", "NUM", "NUM_CHAR", "EMPTY", "ENDL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramatica.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramaticaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public PropositionsContext propositions() {
			return GetRuleContext<PropositionsContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			State = 27;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; start();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; propositions(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode START() { return GetToken(GramaticaParser.START, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public PropositionContext proposition() {
			return GetRuleContext<PropositionContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_start);
		try {
			State = 35;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; label();
				State = 30; Match(START);
				State = 31; Match(NUM);
				State = 32; Match(ENDL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; proposition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(GramaticaParser.END, 0); }
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_end);
		try {
			State = 43;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; Match(END);
				State = 38; input();
				State = 39; Match(ENDL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; Match(END);
				State = 42; input();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LABEL) {
				{
				State = 45; Match(LABEL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropositionsContext : ParserRuleContext {
		public PropositionsContext propositions() {
			return GetRuleContext<PropositionsContext>(0);
		}
		public PropositionContext proposition() {
			return GetRuleContext<PropositionContext>(0);
		}
		public PropositionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propositions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterPropositions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitPropositions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropositions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionsContext propositions() {
		return propositions(0);
	}

	private PropositionsContext propositions(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PropositionsContext _localctx = new PropositionsContext(_ctx, _parentState);
		PropositionsContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_propositions, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 49; proposition();
			}
			_ctx.stop = _input.Lt(-1);
			State = 55;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PropositionsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_propositions);
					State = 51;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 52; proposition();
					}
					} 
				}
				State = 57;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropositionContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public PropositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterProposition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitProposition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionContext proposition() {
		PropositionContext _localctx = new PropositionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposition);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; instruction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode INSTR() { return GetToken(GramaticaParser.INSTR, 0); }
		public Instr_argsContext instr_args() {
			return GetRuleContext<Instr_argsContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; label();
			State = 63; Match(INSTR);
			State = 64; instr_args();
			State = 65; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode DIRECTIVE() { return GetToken(GramaticaParser.DIRECTIVE, 0); }
		public Directive_argsContext directive_args() {
			return GetRuleContext<Directive_argsContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(GramaticaParser.ENDL, 0); }
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; label();
			State = 68; Match(DIRECTIVE);
			State = 69; directive_args();
			State = 70; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LABEL) {
				{
				State = 72; Match(LABEL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_argsContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public Instr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterInstr_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitInstr_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_argsContext instr_args() {
		Instr_argsContext _localctx = new Instr_argsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_instr_args);
		int _la;
		try {
			State = 82;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; Match(LABEL);
				State = 76; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(LABEL);
				State = 78; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LABEL) {
					{
					State = 79; Match(LABEL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directive_argsContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(GramaticaParser.NUM, 0); }
		public ITerminalNode LABEL() { return GetToken(GramaticaParser.LABEL, 0); }
		public Directive_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterDirective_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitDirective_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directive_argsContext directive_args() {
		Directive_argsContext _localctx = new Directive_argsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_directive_args);
		try {
			State = 91;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; Match(NUM);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(T__2);
				State = 86; Match(NUM);
				State = 87; Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; Match(T__4);
				State = 89; Match(LABEL);
				State = 90; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GramaticaParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaListener typedListener = listener as IGramaticaListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaVisitor<TResult> typedVisitor = visitor as IGramaticaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return propositions_sempred((PropositionsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool propositions_sempred(PropositionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11\x62\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x2\x5\x2\x1E\n"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3&\n\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4.\n\x4\x3\x5\x5\x5\x31\n\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\a\x6\x38\n\x6\f\x6\xE\x6;\v\x6\x3\a\x3\a\x5\a?\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x5\nL\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x5\vS\n\v\x5\vU\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5"+
		"\f^\n\f\x3\r\x3\r\x3\r\x2\x2\x3\n\xE\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x2\x2\x62\x2\x1D\x3\x2\x2\x2"+
		"\x4%\x3\x2\x2\x2\x6-\x3\x2\x2\x2\b\x30\x3\x2\x2\x2\n\x32\x3\x2\x2\x2\f"+
		">\x3\x2\x2\x2\xE@\x3\x2\x2\x2\x10\x45\x3\x2\x2\x2\x12K\x3\x2\x2\x2\x14"+
		"T\x3\x2\x2\x2\x16]\x3\x2\x2\x2\x18_\x3\x2\x2\x2\x1A\x1E\x5\x4\x3\x2\x1B"+
		"\x1E\x5\n\x6\x2\x1C\x1E\x5\x6\x4\x2\x1D\x1A\x3\x2\x2\x2\x1D\x1B\x3\x2"+
		"\x2\x2\x1D\x1C\x3\x2\x2\x2\x1E\x3\x3\x2\x2\x2\x1F \x5\x12\n\x2 !\a\n\x2"+
		"\x2!\"\a\r\x2\x2\"#\a\x10\x2\x2#&\x3\x2\x2\x2$&\x5\f\a\x2%\x1F\x3\x2\x2"+
		"\x2%$\x3\x2\x2\x2&\x5\x3\x2\x2\x2\'(\a\v\x2\x2()\x5\b\x5\x2)*\a\x10\x2"+
		"\x2*.\x3\x2\x2\x2+,\a\v\x2\x2,.\x5\b\x5\x2-\'\x3\x2\x2\x2-+\x3\x2\x2\x2"+
		".\a\x3\x2\x2\x2/\x31\a\f\x2\x2\x30/\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31"+
		"\t\x3\x2\x2\x2\x32\x33\b\x6\x1\x2\x33\x34\x5\f\a\x2\x34\x39\x3\x2\x2\x2"+
		"\x35\x36\f\x4\x2\x2\x36\x38\x5\f\a\x2\x37\x35\x3\x2\x2\x2\x38;\x3\x2\x2"+
		"\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\v\x3\x2\x2\x2;\x39\x3\x2\x2"+
		"\x2<?\x5\xE\b\x2=?\x5\x10\t\x2><\x3\x2\x2\x2>=\x3\x2\x2\x2?\r\x3\x2\x2"+
		"\x2@\x41\x5\x12\n\x2\x41\x42\a\b\x2\x2\x42\x43\x5\x14\v\x2\x43\x44\a\x10"+
		"\x2\x2\x44\xF\x3\x2\x2\x2\x45\x46\x5\x12\n\x2\x46G\a\t\x2\x2GH\x5\x16"+
		"\f\x2HI\a\x10\x2\x2I\x11\x3\x2\x2\x2JL\a\f\x2\x2KJ\x3\x2\x2\x2KL\x3\x2"+
		"\x2\x2L\x13\x3\x2\x2\x2MN\a\f\x2\x2NU\a\x3\x2\x2OP\a\f\x2\x2PU\a\x4\x2"+
		"\x2QS\a\f\x2\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2SU\x3\x2\x2\x2TM\x3\x2\x2\x2"+
		"TO\x3\x2\x2\x2TR\x3\x2\x2\x2U\x15\x3\x2\x2\x2V^\a\r\x2\x2WX\a\x5\x2\x2"+
		"XY\a\r\x2\x2Y^\a\x6\x2\x2Z[\a\a\x2\x2[\\\a\f\x2\x2\\^\a\x6\x2\x2]V\x3"+
		"\x2\x2\x2]W\x3\x2\x2\x2]Z\x3\x2\x2\x2^\x17\x3\x2\x2\x2_`\a\x2\x2\x3`\x19"+
		"\x3\x2\x2\x2\f\x1D%-\x30\x39>KRT]";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ProyectoSIC
